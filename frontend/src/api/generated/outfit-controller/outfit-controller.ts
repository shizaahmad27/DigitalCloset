/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Digital Closet API
 * API for managing your digital closet
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryReturnType,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type { Outfit } from ".././model";

import { customInstance } from "../../mutator/custom-instance";

export const getById = (id: MaybeRef<number>, signal?: AbortSignal) => {
  id = unref(id);

  return customInstance<Outfit>({
    url: `/api/outfits/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetByIdQueryKey = (id: MaybeRef<number>) => {
  return ["api", "outfits", id] as const;
};

export const getGetByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = unknown,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({
    signal,
  }) => getById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getById>>,
    TError,
    TData
  >;
};

export type GetByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getById>>
>;
export type GetByIdInfiniteQueryError = unknown;

export function useGetByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getById>>>,
  TError = unknown,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getById>>,
  TError = unknown,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getById>>> = ({
    signal,
  }) => getById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>;
};

export type GetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getById>>
>;
export type GetByIdQueryError = unknown;

export function useGetById<
  TData = Awaited<ReturnType<typeof getById>>,
  TError = unknown,
>(
  id: MaybeRef<number>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const update = (id: MaybeRef<number>, outfit: MaybeRef<Outfit>) => {
  id = unref(id);
  outfit = unref(outfit);

  return customInstance<Outfit>({
    url: `/api/outfits/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: outfit,
  });
};

export const getUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof update>>,
    TError,
    { id: number; data: Outfit },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof update>>,
  TError,
  { id: number; data: Outfit },
  TContext
> => {
  const mutationKey = ["update"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof update>>,
    { id: number; data: Outfit }
  > = (props) => {
    const { id, data } = props ?? {};

    return update(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof update>>
>;
export type UpdateMutationBody = Outfit;
export type UpdateMutationError = unknown;

export const useUpdate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof update>>,
      TError,
      { id: number; data: Outfit },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof update>>,
  TError,
  { id: number; data: Outfit },
  TContext
> => {
  const mutationOptions = getUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const _delete = (id: MaybeRef<number>) => {
  id = unref(id);

  return customInstance<void>({ url: `/api/outfits/${id}`, method: "DELETE" });
};

export const getDeleteMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof _delete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof _delete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["_delete"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof _delete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return _delete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type _DeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof _delete>>
>;

export type _DeleteMutationError = unknown;

export const useDelete = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof _delete>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof _delete>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAll = (signal?: AbortSignal) => {
  return customInstance<Outfit[]>({
    url: `/api/outfits`,
    method: "GET",
    signal,
  });
};

export const getGetAllQueryKey = () => {
  return ["api", "outfits"] as const;
};

export const getGetAllInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({
    signal,
  }) => getAll(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAll>>,
    TError,
    TData
  >;
};

export type GetAllInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAll>>
>;
export type GetAllInfiniteQueryError = unknown;

export function useGetAllInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAll>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetAllQueryOptions = <
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({
    signal,
  }) => getAll(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>;
};

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>;
export type GetAllQueryError = unknown;

export function useGetAll<
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const create = (outfit: MaybeRef<Outfit>, signal?: AbortSignal) => {
  outfit = unref(outfit);

  return customInstance<Outfit>({
    url: `/api/outfits`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: outfit,
    signal,
  });
};

export const getCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: Outfit },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: Outfit },
  TContext
> => {
  const mutationKey = ["create"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: Outfit }
  > = (props) => {
    const { data } = props ?? {};

    return create(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = Outfit;
export type CreateMutationError = unknown;

export const useCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof create>>,
      TError,
      { data: Outfit },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: Outfit },
  TContext
> => {
  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
