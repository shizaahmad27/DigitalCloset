/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Digital Closet API
 * API for managing your digital closet
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/vue-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationReturnType,
} from "@tanstack/vue-query";

import { unref } from "vue";
import type { MaybeRef } from "vue";

import type { UploadImage200, UploadImageBody } from ".././model";

import { customInstance } from "../../mutator/custom-instance";

/**
 * @summary Upload an image file
 */
export const uploadImage = (
  uploadImageBody: MaybeRef<UploadImageBody>,
  signal?: AbortSignal,
) => {
  uploadImageBody = unref(uploadImageBody);

  return customInstance<UploadImage200>({
    url: `/api/upload/image`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadImageBody,
    signal,
  });
};

export const getUploadImageMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: UploadImageBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationKey = ["uploadImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage>>,
    { data: UploadImageBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadImage(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage>>
>;
export type UploadImageMutationBody = UploadImageBody;
export type UploadImageMutationError = unknown;

/**
 * @summary Upload an image file
 */
export const useUploadImage = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadImage>>,
      TError,
      { data: UploadImageBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationOptions = getUploadImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
