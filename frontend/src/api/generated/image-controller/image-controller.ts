/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Digital Closet API
 * API for managing your digital closet
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/vue-query";
import type {
  DataTag,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryReturnType,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type { UploadImage200, UploadImageBody } from ".././model";

import { customInstance } from "../../mutator/custom-instance";

export const uploadImage = (
  uploadImageBody: MaybeRef<UploadImageBody>,
  signal?: AbortSignal,
) => {
  uploadImageBody = unref(uploadImageBody);
  const formData = new FormData();
  formData.append(`file`, uploadImageBody.file);

  return customInstance<UploadImage200>({
    url: `/api/images/upload`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    signal,
  });
};

export const getUploadImageMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: UploadImageBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationKey = ["uploadImage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage>>,
    { data: UploadImageBody }
  > = (props) => {
    const { data } = props ?? {};

    return uploadImage(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage>>
>;
export type UploadImageMutationBody = UploadImageBody;
export type UploadImageMutationError = unknown;

export const useUploadImage = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof uploadImage>>,
      TError,
      { data: UploadImageBody },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationReturnType<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody },
  TContext
> => {
  const mutationOptions = getUploadImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getImage = (filename: MaybeRef<string>, signal?: AbortSignal) => {
  filename = unref(filename);

  return customInstance<string>({
    url: `/api/images/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetImageQueryKey = (filename: MaybeRef<string>) => {
  return ["api", "images", filename] as const;
};

export const getGetImageInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getImage>>>,
  TError = unknown,
>(
  filename: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getImage>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetImageQueryKey(filename);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getImage>>> = ({
    signal,
  }) => getImage(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(filename)),
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getImage>>,
    TError,
    TData
  >;
};

export type GetImageInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getImage>>
>;
export type GetImageInfiniteQueryError = unknown;

export function useGetImageInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getImage>>>,
  TError = unknown,
>(
  filename: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getImage>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetImageInfiniteQueryOptions(filename, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient,
  ) as UseInfiniteQueryReturnType<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}

export const getGetImageQueryOptions = <
  TData = Awaited<ReturnType<typeof getImage>>,
  TError = unknown,
>(
  filename: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getImage>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = getGetImageQueryKey(filename);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getImage>>> = ({
    signal,
  }) => getImage(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(filename)),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getImage>>, TError, TData>;
};

export type GetImageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getImage>>
>;
export type GetImageQueryError = unknown;

export function useGetImage<
  TData = Awaited<ReturnType<typeof getImage>>,
  TError = unknown,
>(
  filename: MaybeRef<string>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getImage>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryReturnType<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetImageQueryOptions(filename, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryReturnType<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = unref(queryOptions).queryKey as DataTag<
    QueryKey,
    TData,
    TError
  >;

  return query;
}
